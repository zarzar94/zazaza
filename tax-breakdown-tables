# Push the branch to GitHub
git push origin add-tax-breakdown-tables<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="utf-8">
  <title>حاسبة الضرائب السورية</title>
  <style>
    body { font-family: system-ui, Arial, sans-serif; padding: 20px; }
    .section { margin-top: 20px; padding: 15px; border: 1px solid #eee; border-radius: 6px; background: #f9f9f9; }
    .result { margin-top: 15px; padding: 10px; background: #eff5f4; border: 1px solid #d5e5e1; border-radius: 4px; }
    table { width: 100%; border-collapse: collapse; margin-top: 10px; }
    th, td { border: 1px solid #ccc; padding: 6px; text-align: center; }
    th { background: #e8f0ef; }
  </style>
</head>
<body>
  <h1>حاسبة الضرائب السورية</h1>
  <label for="taxType">اختر نوع الضريبة:</label>
  <select id="taxType">
    <option value="" disabled selected>— اختر —</option>
    <option value="profit">ضريبة الأرباح الحقيقية</option>
    <option value="lump">الدخل المقطوع</option>
    <option value="salary">ضريبة الرواتب والأجور</option>
  </select>

  <div id="profitSection" class="section hidden">
    <h2>ضريبة الأرباح الحقيقية</h2>
    <label>صافي الربح السنوي (س.ل):
      <input type="number" id="profitValue" min="0" step="0.01" value="0">
    </label>
    <button id="profitCalculate">احسب الضريبة</button>
    <div id="profitResult" class="result hidden"></div>
  </div>

  <div id="lumpSection" class="section hidden">
    <h2>الدفعة المقطوعة (تقدير الأرباح)</h2>
    <label>إجمالي رقم الأعمال السنوي (س.ل):
      <input type="number" id="lumpTurnover" min="0" step="0.01" value="0">
    </label>
    <label>نسبة الربح المقدّرة (%):
      <input type="number" id="lumpRatio" min="0" step="0.001" value="0.07">
    </label>
    <button id="lumpCalculate">احسب الضريبة</button>
    <div id="lumpResult" class="result hidden"></div>
  </div>

  <div id="salarySection" class="section hidden">
    <h2>ضريبة الرواتب والأجور</h2>
    <label>الراتب الشهري الإجمالي (س.ل):
      <input type="number" id="salaryValue" min="0" step="0.01" value="0">
    </label>
    <label>السنة:
      <select id="salaryYear">
        <option value="2024">2024</option>
        <option value="2025">2025</option>
      </select>
    </label>
    <button id="salaryCalculate">احسب الضريبة</button>
    <div id="salaryResult" class="result hidden"></div>
  </div>

  <script>
    const profitExemption = 3000000;
    const profitBrackets = [
      { limit: 10000000, rate: 0.10 },
      { limit: 30000000, rate: 0.14 },
      { limit: 100000000, rate: 0.18 },
      { limit: 250000000, rate: 0.22 },
      { limit: 500000000, rate: 0.24 },
      { limit: Infinity, rate: 0.25 }
    ];

    function calculateProfitTax(annualProfit, brackets = profitBrackets, exempt = profitExemption) {
      let taxable = annualProfit - exempt;
      if (taxable <= 0) return { breakdown: [], totalTax: 0 };
      let remaining = taxable, previousLimit = 0, breakdown = [], totalTax = 0;
      for (let i = 0; i < brackets.length; i++) {
        const { limit, rate } = brackets[i];
        const maxThisBracket = limit - previousLimit;
        const taxableThisBracket = Math.min(remaining, maxThisBracket);
        const taxThisBracket = taxableThisBracket * rate;
        if (taxableThisBracket > 0) {
          breakdown.push({ bracket: i+1, taxable: taxableThisBracket, rate, tax: taxThisBracket });
        }
        totalTax += taxThisBracket;
        remaining -= taxableThisBracket;
        previousLimit = limit;
        if (remaining <= 0) break;
      }
      return { breakdown, totalTax };
    }

    function renderTable(breakdown, totalTax) {
      let html = `<table><tr><th>الشريحة</th><th>الجزء الخاضع</th><th>النسبة</th><th>الضريبة</th></tr>`;
      breakdown.forEach(row => {
        html += `<tr><td>${row.bracket}</td><td>${row.taxable.toFixed(2)}</td><td>${(row.rate*100).toFixed(2)}٪</td><td>${row.tax.toFixed(2)}</td></tr>`;
      });
      html += `</table><p><b>الإجمالي: ${totalTax.toFixed(2)}</b></p>`;
      return html;
    }

    document.getElementById('taxType').addEventListener('change', e => {
      document.querySelectorAll('.section').forEach(sec => sec.classList.add('hidden'));
      if (e.target.value) document.getElementById(e.target.value+'Section').classList.remove('hidden');
    });

    document.getElementById('profitCalculate').addEventListener('click', () => {
      const profit = parseFloat(document.getElementById('profitValue').value) || 0;
      const { breakdown, totalTax } = calculateProfitTax(profit);
      let html = breakdown.length === 0 ? '<p>لا توجد ضريبة مستحقة (الربح دون حد الإعفاء).</p>' : renderTable(breakdown, totalTax);
      const resultEl = document.getElementById('profitResult');
      resultEl.innerHTML = html;
      resultEl.classList.remove('hidden');
    });

    document.getElementById('lumpCalculate').addEventListener('click', () => {
      const turnover = parseFloat(document.getElementById('lumpTurnover').value) || 0;
      const ratio = parseFloat(document.getElementById('lumpRatio').value) || 0;
      const estimatedProfit = turnover * ratio;
      const { breakdown, totalTax } = calculateProfitTax(estimatedProfit);
      let html = `<p>الربح المقدّر: ${estimatedProfit.toFixed(2)}</p>`;
      html += breakdown.length === 0 ? '<p>لا توجد ضريبة مستحقة (الربح المقدّر دون حد الإعفاء).</p>' : renderTable(breakdown, totalTax);
      const resultEl = document.getElementById('lumpResult');
      resultEl.innerHTML = html;
      resultEl.classList.remove('hidden');
    });

    const salaryBrackets2024 = [
      { limit: 250000, rate: 0.05 },
      { limit: 450000, rate: 0.07 },
      { limit: 650000, rate: 0.09 },
      { limit: 850000, rate: 0.11 },
      { limit: 1100000, rate: 0.13 },
      { limit: Infinity, rate: 0.15 }
    ];
    const salaryBrackets2025 = salaryBrackets2024;

    function calculateSalaryTax(monthlyIncome, brackets, exempt=0) {
      let taxable = monthlyIncome - exempt;
      if (taxable <= 0) return { breakdown: [], totalTax: 0 };
      let remaining = taxable, previousLimit=0, breakdown=[], totalTax=0;
      for (let i=0;i<brackets.length;i++) {
        const {limit,rate} = brackets[i];
        const maxThisBracket = limit-previousLimit;
        const taxableThisBracket = Math.min(remaining,maxThisBracket);
        const taxThisBracket = taxableThisBracket*rate;
        if (taxableThisBracket > 0) breakdown.push({bracket:i+1,taxable:taxableThisBracket,rate,tax:taxThisBracket});
        totalTax += taxThisBracket; remaining-=taxableThisBracket; previousLimit=limit; if(remaining<=0) break;
      }
      return {breakdown,totalTax};
    }

    document.getElementById('salaryCalculate').addEventListener('click', () => {
      const income = parseFloat(document.getElementById('salaryValue').value) || 0;
      const year = document.getElementById('salaryYear').value;
      const brackets = year==='2024'?salaryBrackets2024:salaryBrackets2025;
      const {breakdown,totalTax} = calculateSalaryTax(income,brackets);
      let html = breakdown.length === 0 ? '<p>لا توجد ضريبة مستحقة (الدخل دون حد الإعفاء).</p>' : renderTable(breakdown,totalTax);
      const resultEl=document.getElementById('salaryResult');
      resultEl.innerHTML=html;
      resultEl.classList.remove('hidden');
    });
  </script>
</body>
</html>
# Create a new branch
git checkout -b add-tax-breakdown-tables

# Stage the updated file
git add tax-calculator-ui.html

# Commit with a clear message
git commit -m "feat: show tax breakdown in tables for profit, lump sum, and salary taxes"
